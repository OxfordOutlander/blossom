# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.16.0
# source: queries.sql
from typing import Any, AsyncIterator, Optional

import psycopg

from codegen.sqlc import models


AUTHN_FETCH_USER_EMAIL = """-- name: authn_fetch_user_email \\:one
SELECT id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at FROM users
WHERE email = %s
"""


RPC_FETCH_TENANT_ASSOCIATED_WITH_USER = """-- name: rpc_fetch_tenant_associated_with_user \\:one
SELECT id, external_id, created_at, updated_at, name, inbound_source FROM tenants t
WHERE t.external_id = %s
    AND EXISTS (
        SELECT id, external_id, created_at, updated_at, user_id, tenant_id, removed_at, removed_by_user
        FROM tenants_users tu
        WHERE tu.user_id = %s
            AND tu.tenant_id = t.id
    )
"""


TENANT_ADD_USER = """-- name: tenant_add_user \\:one
INSERT INTO tenants_users (tenant_id, user_id)
VALUES (%s, %s)
RETURNING id, external_id, created_at, updated_at, user_id, tenant_id, removed_at, removed_by_user
"""


TENANT_CREATE = """-- name: tenant_create \\:one
INSERT INTO tenants (name, inbound_source)
VALUES (%s, %s)
RETURNING id, external_id, created_at, updated_at, name, inbound_source
"""


TENANT_FETCH = """-- name: tenant_fetch \\:one
SELECT id, external_id, created_at, updated_at, name, inbound_source
FROM tenants
WHERE id = %s
"""


TENANT_FETCH_ALL = """-- name: tenant_fetch_all \\:many
SELECT id, external_id, created_at, updated_at, name, inbound_source
FROM tenants
"""


TENANT_FETCH_EXT = """-- name: tenant_fetch_ext \\:one
SELECT id, external_id, created_at, updated_at, name, inbound_source
FROM tenants
WHERE external_id = %s
"""


TEST_TENANT_CREATE = """-- name: test_tenant_create \\:one
INSERT INTO tenants (name, inbound_source)
VALUES (%s, %s)
RETURNING id, external_id, created_at, updated_at, name, inbound_source
"""


TEST_TENANT_USER_CREATE = """-- name: test_tenant_user_create \\:one
INSERT INTO tenants_users (user_id, tenant_id)
VALUES (%s, %s)
RETURNING id, external_id, created_at, updated_at, user_id, tenant_id, removed_at, removed_by_user
"""


TEST_USER_CREATE = """-- name: test_user_create \\:one
INSERT INTO users (name, email, password_hash, signup_step)
VALUES (%s, %s, %s, 'complete')
RETURNING id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


TEST_USER_CREATE_DISABLED = """-- name: test_user_create_disabled \\:one
INSERT INTO users (name, email, password_hash, signup_step, is_enabled)
VALUES (%s, %s, %s, 'complete', false)
RETURNING id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


TEST_USER_CREATE_NOT_SIGNED_UP = """-- name: test_user_create_not_signed_up \\:one
INSERT INTO users (name, email)
VALUES (%s, %s)
RETURNING id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


USER_CREATE = """-- name: user_create \\:one
INSERT INTO users (name, email, password_hash, signup_step)
VALUES (%s, %s, %s, %s)
RETURNING id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
"""


USER_FETCH = """-- name: user_fetch \\:one
SELECT id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
FROM users
WHERE id = %s
"""


USER_FETCH_EXT = """-- name: user_fetch_ext \\:one
SELECT id, external_id, created_at, updated_at, name, email, password_hash, signup_step, is_enabled, last_visited_at
FROM users
WHERE external_id = %s
"""


class AsyncQuerier:
    def __init__(self, conn: psycopg.AsyncConnection[Any]):
        self._conn = conn

    async def authn_fetch_user_email(self, *, email: str) -> Optional[models.User]:
        row = await (await self._conn.execute(AUTHN_FETCH_USER_EMAIL, (email, ))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def rpc_fetch_tenant_associated_with_user(self, *, external_id: str, user_id: int) -> Optional[models.Tenant]:
        row = await (await self._conn.execute(RPC_FETCH_TENANT_ASSOCIATED_WITH_USER, (external_id, user_id))).fetchone()
        if row is None:
            return None
        return models.Tenant(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def tenant_add_user(self, *, tenant_id: int, user_id: int) -> Optional[models.TenantsUser]:
        row = await (await self._conn.execute(TENANT_ADD_USER, (tenant_id, user_id))).fetchone()
        if row is None:
            return None
        return models.TenantsUser(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            user_id=row[4],
            tenant_id=row[5],
            removed_at=row[6],
            removed_by_user=row[7],
        )

    async def tenant_create(self, *, name: str, inbound_source: models.TenantsInboundSource) -> Optional[models.Tenant]:
        row = await (await self._conn.execute(TENANT_CREATE, (name, inbound_source))).fetchone()
        if row is None:
            return None
        return models.Tenant(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def tenant_fetch(self, *, id: int) -> Optional[models.Tenant]:
        row = await (await self._conn.execute(TENANT_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.Tenant(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def tenant_fetch_all(self) -> AsyncIterator[models.Tenant]:
        cursor = await self._conn.execute(TENANT_FETCH_ALL)
        async for row in cursor:
            yield models.Tenant(
                id=row[0],
                external_id=row[1],
                created_at=row[2],
                updated_at=row[3],
                name=row[4],
                inbound_source=row[5],
            )

    async def tenant_fetch_ext(self, *, external_id: str) -> Optional[models.Tenant]:
        row = await (await self._conn.execute(TENANT_FETCH_EXT, (external_id, ))).fetchone()
        if row is None:
            return None
        return models.Tenant(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def test_tenant_create(self, *, name: str, inbound_source: models.TenantsInboundSource) -> Optional[models.Tenant]:
        row = await (await self._conn.execute(TEST_TENANT_CREATE, (name, inbound_source))).fetchone()
        if row is None:
            return None
        return models.Tenant(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            inbound_source=row[5],
        )

    async def test_tenant_user_create(self, *, user_id: int, tenant_id: int) -> Optional[models.TenantsUser]:
        row = await (await self._conn.execute(TEST_TENANT_USER_CREATE, (user_id, tenant_id))).fetchone()
        if row is None:
            return None
        return models.TenantsUser(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            user_id=row[4],
            tenant_id=row[5],
            removed_at=row[6],
            removed_by_user=row[7],
        )

    async def test_user_create(self, *, name: str, email: str, password_hash: Optional[str]) -> Optional[models.User]:
        row = await (await self._conn.execute(TEST_USER_CREATE, (name, email, password_hash))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def test_user_create_disabled(self, *, name: str, email: str, password_hash: Optional[str]) -> Optional[models.User]:
        row = await (await self._conn.execute(TEST_USER_CREATE_DISABLED, (name, email, password_hash))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def test_user_create_not_signed_up(self, *, name: str, email: str) -> Optional[models.User]:
        row = await (await self._conn.execute(TEST_USER_CREATE_NOT_SIGNED_UP, (name, email))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def user_create(self, *, name: str, email: str, password_hash: Optional[str], signup_step: models.UserSignupStep) -> Optional[models.User]:
        row = await (await self._conn.execute(USER_CREATE, (name, email, password_hash, signup_step))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def user_fetch(self, *, id: int) -> Optional[models.User]:
        row = await (await self._conn.execute(USER_FETCH, (id, ))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )

    async def user_fetch_ext(self, *, external_id: str) -> Optional[models.User]:
        row = await (await self._conn.execute(USER_FETCH_EXT, (external_id, ))).fetchone()
        if row is None:
            return None
        return models.User(
            id=row[0],
            external_id=row[1],
            created_at=row[2],
            updated_at=row[3],
            name=row[4],
            email=row[5],
            password_hash=row[6],
            signup_step=row[7],
            is_enabled=row[8],
            last_visited_at=row[9],
        )
